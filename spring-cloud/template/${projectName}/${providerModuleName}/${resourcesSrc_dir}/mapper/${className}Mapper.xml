<#assign className = table.tableClassName>
<#assign classNameFirstLower = table.tableClassName?uncap_first>
<#assign primaryKey = table.primaryKey>
<#assign primaryKeyParameters = table.primaryKeyParameters>
<#assign primaryKeyParameterValues = table.primaryKeyParameterValues>
<#macro mapperEl value>${r"#{"}${value}}</#macro>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="${basePackage}.mapper.${className}Mapper">

    <resultMap id="BaseModelMap" type="${basePackage}.entity.${className}Entity">
        <#list table.columns as column>
        <result property="${column.columnFieldNameFirstLower}" column="${column.columnName}"/>
        </#list>
    </resultMap>

    <parameterMap id="BaseParameterMap" type="${basePackage}.entity.${className}Entity"></parameterMap>
    <parameterMap id="BaseConditionMap" type="${basePackage}.condition.${className}Condition"></parameterMap>

    <sql id="selectCondition">
        <trim prefixOverrides="AND|OR">
        <#list table.columns as column>
            <#if column.ignoreSearch>
            <#elseif column.columnName == table.validStatusField.fieldName>
            <if test="condition.${column.columnFieldNameFirstLower} != null">
                <#if (column_index > 0)>AND </#if>`${table.tableName}`.`${column.columnName}` = <@mapperEl 'condition.' + column.columnFieldNameFirstLower/>
            </if>
            <#elseif (column.columnFieldType == "Integer" || column.columnFieldType == "Long" || column.columnFieldType == "Short" || column.columnFieldType == "Byte")>
            <if test="condition.${column.columnFieldNameFirstLower} != null">
                <#if (column_index > 0)>AND </#if>`${table.tableName}`.`${column.columnName}` = <@mapperEl 'condition.' + column.columnFieldNameFirstLower/>
            </if>
            <if test="condition.${column.columnFieldNameFirstLower}List != null and condition.${column.columnFieldNameFirstLower}List.size() > 0">
                AND `${table.tableName}`.`${column.columnName}` in
                <foreach collection="condition.${column.columnFieldNameFirstLower}List" item="it" open="(" close=")" separator=",">
                    ${r"#{it}"}
                </foreach>
            </if>
            <if test="condition.${column.columnFieldNameFirstLower}Min != null">
                <![CDATA[
                <#if (column_index > 0)>AND </#if>`${table.tableName}`.`${column.columnName}` >= <@mapperEl 'condition.' + column.columnFieldNameFirstLower +'Min'/>
                ]]>
            </if>
            <if test="condition.${column.columnFieldNameFirstLower}Max != null">
                <![CDATA[
                <#if (column_index > 0)>AND </#if>`${table.tableName}`.`${column.columnName}` <= <@mapperEl 'condition.' + column.columnFieldNameFirstLower +'Max'/>
                ]]>
            </if>
            <#elseif (column.columnFieldType == "Date")>
            <if test="condition.${column.columnFieldNameFirstLower} != null">
                <#if (column_index > 0)>AND </#if>`${table.tableName}`.`${column.columnName}` = <@mapperEl 'condition.' + column.columnFieldNameFirstLower/>
            </if>
            <if test="condition.${column.columnFieldNameFirstLower}Min != null">
                <![CDATA[
                <#if (column_index > 0)>AND </#if>`${table.tableName}`.`${column.columnName}` >= <@mapperEl 'condition.' + column.columnFieldNameFirstLower +'Min'/>
                ]]>
            </if>
            <if test="condition.${column.columnFieldNameFirstLower}Max != null">
                <![CDATA[
                <#if (column_index > 0)>AND </#if>`${table.tableName}`.`${column.columnName}` <= <@mapperEl 'condition.' + column.columnFieldNameFirstLower +'Max'/>
                ]]>
            </if>
            <#elseif (column.columnFieldType == "BigDecimal" || column.columnFieldType == "Double" || column.columnFieldType == "Float")>
            <if test="condition.${column.columnFieldNameFirstLower}Min != null">
                <![CDATA[
                <#if (column_index > 0)>AND </#if>`${table.tableName}`.`${column.columnName}` >= <@mapperEl 'condition.' + column.columnFieldNameFirstLower +'Min'/>
                ]]>
            </if>
            <if test="condition.${column.columnFieldNameFirstLower}Max != null">
                <![CDATA[
                <#if (column_index > 0)>AND </#if>`${table.tableName}`.`${column.columnName}` <= <@mapperEl 'condition.' + column.columnFieldNameFirstLower +'Max'/>
                ]]>
            </if>
            <#elseif (column.columnFieldType == "String")>
            <if test="condition.${column.columnFieldNameFirstLower} != null and condition.${column.columnFieldNameFirstLower} != ''">
                <#if (column_index > 0)>AND </#if>`${table.tableName}`.`${column.columnName}` = <@mapperEl 'condition.' + column.columnFieldNameFirstLower/>
            </if>
            <if test="condition.${column.columnFieldNameFirstLower}StartWith != null and condition.${column.columnFieldNameFirstLower}StartWith != ''">
                AND `${table.tableName}`.`${column.columnName}` LIKE concat(<@mapperEl 'condition.' + column.columnFieldNameFirstLower +'StartWith'/>, '%')
            </if>
            <if test="condition.${column.columnFieldNameFirstLower}Like != null and condition.${column.columnFieldNameFirstLower}Like != ''">
                AND `${table.tableName}`.`${column.columnName}` LIKE concat('%', <@mapperEl 'condition.' + column.columnFieldNameFirstLower +'Like'/>, '%')
            </if>
            <if test="condition.${column.columnFieldNameFirstLower}List != null and condition.${column.columnFieldNameFirstLower}List.size() > 0">
                AND `${table.tableName}`.`${column.columnName}` in
                <foreach collection="condition.${column.columnFieldNameFirstLower}List" item="it" open="(" close=")" separator=",">
                    ${r"#{it}"}
                </foreach>
            </if>
            <#else>
            <if test="condition.${column.columnFieldNameFirstLower} != null">
                <#if (column_index > 0)>AND </#if>`${table.tableName}`.`${column.columnName}` = <@mapperEl 'condition.' + column.columnFieldNameFirstLower/>
            </if>
            </#if>
        </#list>
        </trim>
    </sql>

    <sql id="where">
        <if test="condition != null">
            <where>
                <include refid="selectCondition"/>
            </where>
        </if>
    </sql>
    <sql id="listWhere">
        <if test="conditionList != null and conditionList.size() > 0">
            <where>
                <foreach collection="conditionList" item="condition" open="(" close=")" separator=" OR ">
                    <include refid="selectCondition"/>
                </foreach>
            </where>
        </if>
    </sql>
    <sql id="selectColumnList">
        <#list table.columns as column>
        `${table.tableName}`.`${column.columnName}`<#if column_has_next>,</#if>
        </#list>
    </sql>
    <sql id="updateColumnSet">
        <set>
            <#list table.columns as column>
            <#if (column.primaryKey && column.autoIncrement)>
            <#else>
            <if test="model.${column.columnFieldNameFirstLower} != null">
                `${table.tableName}`.`${column.columnName}` = <@mapperEl 'model.' + column.columnFieldNameFirstLower/><#if column_has_next>,</#if>
            </if>
            </#if>
            </#list>
        </set>
    </sql>

    <insert id="insert" parameterMap="BaseParameterMap"<#if table.hasPrimaryKey><#if primaryKey[0].autoIncrement> useGeneratedKeys="true" keyProperty="model.${primaryKey[0].columnFieldNameFirstLower}"</#if></#if>>
        insert into `${table.tableName}`
        <trim prefix="(" suffix=")" suffixOverrides=",">
        <#list table.columns as column>
            <#if !column.autoIncrement>
            <if test="model.${column.columnFieldNameFirstLower} != null">`${column.columnName}`,</if>
            </#if>
        </#list>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
        <#list table.columns as column>
            <#if !column.autoIncrement>
            <if test="model.${column.columnFieldNameFirstLower} != null"><@mapperEl 'model.' + column.columnFieldNameFirstLower/>,</if>
            </#if>
        </#list>
        </trim>
    </insert>

    <insert id="insertList" parameterMap="BaseParameterMap">
        <foreach collection="list" item="item" separator=";">
            insert into `${table.tableName}`
            <trim prefix="(" suffix=")" suffixOverrides=",">
            <#list table.columns as column>
                <#if !column.autoIncrement>
                <if test="item.${column.columnFieldNameFirstLower} != null">`${column.columnName}`,</if>
                </#if>
            </#list>
            </trim>
            <trim prefix="values (" suffix=")" suffixOverrides=",">
            <#list table.columns as column>
                <#if !column.autoIncrement>
                <if test="item.${column.columnFieldNameFirstLower} != null"><@mapperEl 'item.' + column.columnFieldNameFirstLower/>,</if>
                </#if>
            </#list>
            </trim>
        </foreach>
    </insert>

    <delete id="deleteByCondition" parameterMap="BaseConditionMap">
        DELETE FROM `${table.tableName}`
        <include refid="where"/>
    </delete>

    <delete id="deleteByConditionList" parameterMap="BaseConditionMap">
        DELETE FROM `${table.tableName}`
        <include refid="listWhere"/>
    </delete>

    <update id="updateByCondition">
        UPDATE `${table.tableName}`
        <include refid="updateColumnSet"/>
        <include refid="where"/>
    </update>

    <update id="updateByConditionList">
        UPDATE `${table.tableName}`
        <include refid="updateColumnSet"/>
        <include refid="listWhere"/>
    </update>

    <select id="getByCondition" resultMap="BaseModelMap" parameterMap="BaseConditionMap">
        SELECT
        <include refid="selectColumnList"/>
        FROM
        `${table.tableName}`
        <include refid="where"/>
    </select>

    <select id="selectByCondition" resultMap="BaseModelMap">
        SELECT
        <include refid="selectColumnList"/>
        FROM
        `${table.tableName}`
        <include refid="where"/>
        <if test="order != null and order.orderBy != null and order.orderBy != ''">
            ORDER BY ${r"${order.orderBy}"}
        </if>
    </select>

    <select id="selectByConditionList" resultMap="BaseModelMap">
        SELECT
        <include refid="selectColumnList"/>
        FROM
        `${table.tableName}`
        <include refid="listWhere"/>
        <if test="order != null and order.orderBy != null and order.orderBy != ''">
            ORDER BY ${r"${order.orderBy}"}
        </if>
    </select>

    <select id="countByCondition" parameterMap="BaseConditionMap" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM `${table.tableName}`
        <include refid="where"/>
    </select>

    <select id="countByConditionList" parameterMap="BaseConditionMap" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM `${table.tableName}`
        <include refid="listWhere"/>
    </select>
</mapper>
